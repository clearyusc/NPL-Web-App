@using SimpleWebApp.Models;
@model EncounterViewModel
@{
    ViewData["Title"] = "Home Page";
}

<style>
    .checkbox input[type="checkbox"] {
        opacity: 0;
    }

    .flex-container-actions {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        align-items: baseline;
    }

    .flex-container {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: baseline;
    }

    .ministry-action-btn {
        /*min-height: 0px;*/
    }
</style>
<form asp-controller="Home" asp-action="SaveEncounter">

    @*<div class="btn-group btn-group-lg" role="group">
            <button type="button" name="prayerButton" value="getButtonValue(this)" onclick="ministryActionClicked(this)"
                    class="ministry-action-btn btn btn-default">Prayer</button>
            <button type="button" name="testimonyButton" value="getButtonValue(this)" onclick="ministryActionClicked(this)"
                    class="ministry-action-btn btn btn-default">Testimony</button>
            <button type="button" name="gospelButton" value="getButtonValue(this)" onclick="ministryActionClicked(this)"
                    class="ministry-action-btn btn btn-default">Gospel</button>
        </div>*@
    <br />
    <br />
    <div class="flex-container-actions">

        @*<div class="btn-group btn-group-lg btn-group-justified">*@
        <div class="checkbox">
            <input type="checkbox" asp-for="prayer" id="prayerButton">
            <label onclick="ministryActionClicked(this)" class="ministry-action-btn btn btn-default"
                   for="prayerButton">Prayer</label>
        </div>
        <div class="checkbox">
            <input type="checkbox" asp-for="testimony" id="testimonyButton">
            <label onclick="ministryActionClicked(this)" class="ministry-action-btn btn btn-default"
                   for="testimonyButton">Testimony</label>
        </div>
        <div class="checkbox">
            <input type="checkbox" asp-for="gospel" id="testimonyButton">
            <label onclick="ministryActionClicked(this)" class="ministry-action-btn btn btn-default"
                   for="testimonyButton">Gospel</label>
        </div>
        @*</div>*@
    </div>


    <br />
    <div class="flex-container">
        <div class="btn-group-lg" data-toggle="buttons">
            <label class="ryg-response btn btn-danger">
                <i class="fas fa-2x fa-frown"><input type="radio" name="options" id="redLight" onchange="handleMinistryResponseChange(this)"></i>
            </label>
            <label class="ryg-response btn btn-warning">
                <i class="fas fa-2x fa-meh"><input type="radio" name="options" id="yellowLight" onchange="handleMinistryResponseChange(this)"></i>
            </label>
            <label class="ryg-response btn btn-success">
                <i class="fas fa-2x fa-smile"><input type="radio" name="options" id="greenLight" onchange="handleMinistryResponseChange(this)"></i>
            </label>
        </div>
    </div>
    <br />
    <br />
    <div class="flex-container">
        <div class="btn-group-lg" data-toggle="buttons">
            <label class="btn btn-default">
                <input type="radio" name="options" id="noToTraining" onchange="handleMinistryResponseChange(this)"> No to Training
            </label>
            <label class="btn-circle btn btn-default">
                <input type="radio" name="options" id="yesToTraining" onchange="handleMinistryResponseChange(this)"> Yes to Training
            </label>
        </div>
    </div>
    <br />
    <hr />
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12" style="width:100%">
                    <input type="text" placeholder="Name">
                    <textarea rows="5" placeholder="Notes..."></textarea>
                </div>
            </div>
        </div>
    <br />
    <div class="flex-container">
        @*<label class="btn-lg btn-negative" onclick="resetAllDataFields">Reset</label>*@ <!-- Todo: add reset button somehwere -->
        <button class="btn-lg btn-primary btn-block" type="submit">Save</button>
    </div>
</form>



@*<div class="btn-group btn-group-lg">
        <label class="btn btn-default">
            <input type="button" name="options" id="option1" checked> Prayer
        </label>
        <label class="btn btn-default">
            <input type="button" name="options" id="option2"> Testimony
        </label>
        <label class="btn btn-default">
            <input class="btn btn-default" type="button" name="options" id="option3"> Gospel
        </label>
    </div>*@


<!--@*@*<form asp-controller="Home" asp-action="SaveEncounter" method="post">*@

<button id="prayerButton" class="ministry-action-btn btn btn-default">Prayer</button>

@*<form asp-controller="Home" asp-action="IncrementTestimonyCountBy" asp-route-number="1" method="post">*@
<button id="testimonyButton" class="ministry-action-btn btn btn-default">Testimony</button>
@*</form>*@

@*<form asp-controller="Home" asp-action="IncrementGospelCountBy" asp-route-number="1" method="post">*@
<button id="gospelButton" class="ministry-action-btn btn btn-default">Gospel</button>
@*</form>*@

@*</form>*@ -->


<script>

    function getButtonValue(elem) {
        if (elem.classList.contains('active')) {
            return true;
        } else {
            return false;
        }
    }

    function toggleFaceIcon(elem) {
        var faceIconClasses = elem.parentNode.classList;
        var notAFaceIcon = faceIconClasses.contains('fas') === false && faceIconClasses.contains('far') === false;
        if (notAFaceIcon)
            return;

        if (elem.checked) {
            faceIconClasses.remove('fas');
            faceIconClasses.add('far');
        } else {
            faceIconClasses.remove('far');
            faceIconClasses.add('fas');
        }
    }

    var checkboxes = document.querySelectorAll('input[type=radio]');

    function handleMinistryResponseChange(elem) {
        toggleFaceIcon(elem);

        var unchecked = [];

        for (var k = 0; k < checkboxes.length; k++) {
            if (checkboxes[k].checked === false)
                unchecked.push(checkboxes[k]);
        }

        for (var i = 0; i < unchecked.length; i++) {
            toggleFaceIcon(unchecked[i]);
        }
    }

    // todo: implement this to turn the face inside out when it gets clicked
    //var ministryResponseButtons = document.querySelectorAll('.ryg-response');
    //for (var i = 0; i < ministryResponseButtons.length; i++) {
    //    var button = ministryResponseButtons[i];
    //    var icon = button.children[0]
    //    button.addEventListener('change', toggleFaceIcons(icon, button.checked));
    //}

    function ministryActionClicked(elem) {
        if (elem.classList.contains('active')) {
            elem.classList.remove('active');
        } else {
            elem.classList.add('active');
        }
        //if (event.id != null) {
        //    document.querySelector(`#${id}`).addClass('active');

        //    //switch (event.id) {
        //    //    case 'prayerButton':
        //    //        break;
        //    //    case 'testimonyButton':
        //    //        break;
        //    //    case 'gospelButton':
        //    //        break;

        //    //}
        //}
    }

    //document.querySelector('.ministry-action-btn').addEventListener('click', ministryActionClicked(elem));


    function activateAction(id) {

    }

    function deactivateAction(id) {

    }

</script>